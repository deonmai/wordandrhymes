"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const cheerio = require("cheerio");
class Util {
    constructor() {
        throw new Error(`The ${this.constructor.name} class may not be instantiated!`);
    }
    /**
     * Parse html of the given url
     * @param url Website url to parse html from
     */
    static getHTML(url) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof url !== "string")
                throw new Error(`The url type must be a string, received "${typeof url}"!`);
            try {
                const res = yield node_fetch_1.default(url, { redirect: "manual" });
                if (res.status !== 200)
                    return "";
                const html = yield res.text();
                return html;
            }
            catch (e) {
                return "";
            }
        });
    }
    /**
     * Loads HTML
     * @param html Raw html to load
     */
    static loadHTML(html) {
        if (typeof html !== "string")
            throw new Error(`The html type must be a string, received "${typeof html}"!`);
        return cheerio.load(html);
    }
}
exports.default = Util;
