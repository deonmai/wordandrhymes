"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Util_1 = require("../Util/Util");
const Constants_1 = require("../Util/Constants");
class Dictionary {
    /**
     * Search meaning of a word
     * @param word Word
     */
    meaning(word) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            if (typeof word !== "string")
                reject(new Error("Word must be a string!"));
            const html = yield Util_1.default.getHTML(`${Constants_1.default.BASE_URL}${Constants_1.default.DICT}${word.split(" ").join("-")}`);
            if (!html)
                return reject(new Error("Not found!"));
            const $ = Util_1.default.loadHTML(html);
            const definition = $('meta[itemprop="headline"]').attr("content");
            const m = definition.split("definition: 1. ")[1].split(" 2. ")[0] ? definition.split("definition: 1. ")[1].split(" 2. ")[0] : definition.split("definition: 1. ")[1];
            const pron = [];
            const examples = [];
            $('source[type="audio/mpeg"]').each((i, elm) => {
                pron.push({
                    type: elm.attribs.type,
                    url: `${Constants_1.default.BASE_URL}${elm.attribs.src}`
                });
            });
            $('source[type="audio/ogg"]').each((i, elm) => {
                pron.push({
                    type: elm.attribs.type,
                    url: `${Constants_1.default.BASE_URL}${elm.attribs.src}`
                });
            });
            $('span[class="deg"]').each((i, elm) => {
                if ($(elm).text().length)
                    examples.push($(elm).text().trim());
            });
            const obj = {
                word: definition.split("definition: ")[0].trim(),
                meaning: m.substring(0, m.lastIndexOf(". Learn more.")) || m,
                pronounciation: $('.dipa').first().text(),
                type: $('.dpos').eq(0).text().toUpperCase(),
                examples: examples,
                audio: pron
            };
            return resolve(obj);
        }));
    }
    /**
     * Returns pronounciation of a word
     * @param word Word
     */
    pronounciation(word) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            if (typeof word !== "string")
                reject(new Error("Word must be a string!"));
            const html = yield Util_1.default.getHTML(`${Constants_1.default.BASE_URL}${Constants_1.default.PRON}${word.split(" ").join("-")}`);
            if (!html)
                return reject(new Error("Not found!"));
            const $ = Util_1.default.loadHTML(html);
            const pron = [];
            $('source[type="audio/mpeg"]').each((i, elm) => {
                pron.push({
                    type: elm.attribs.type,
                    url: `${Constants_1.default.BASE_URL}${elm.attribs.src}`
                });
            });
            $('source[type="audio/ogg"]').each((i, elm) => {
                pron.push({
                    type: elm.attribs.type,
                    url: `${Constants_1.default.BASE_URL}${elm.attribs.src}`
                });
            });
            const obj = {
                word: $('meta[itemprop="transcript"]').attr("content"),
                audio: pron
            };
            return resolve(obj);
        }));
    }
}
exports.default = Dictionary;
