{"ast":null,"code":"var fs = require('fs');\n\nvar Lazy = require('lazy');\n\nvar Hash = require('hashish');\n\nvar dictFile = __dirname + '/data/cmudict.0.7a';\n\nmodule.exports = function (cb, dictFileDirect) {\n  var self = {};\n  var dict = {};\n\n  self.pronounce = function (word) {\n    return dict[word.toUpperCase()];\n  };\n\n  self.syllables = function (word) {\n    var prose = self.pronounce(word);\n    return prose && prose[0].filter(function (ph) {\n      return ph.match(/^[AEIOU]/);\n    }).length;\n  };\n\n  self.rhyme = function (word) {\n    word = word.toUpperCase();\n    if (!dict[word]) return [];\n    var xs = dict[word].reduce(function (acc, w) {\n      acc[active(w)] = true;\n      return acc;\n    }, {});\n    var rhymes = [];\n    Object.keys(dict).forEach(function (w) {\n      if (w === word) return;\n      var some = dict[w].some(function (p) {\n        return xs[active(p)];\n      });\n      if (some) rhymes.push(w);\n    }, []);\n    return rhymes;\n  };\n\n  self.doRhyme = function (word1, word2) {\n    // find words in rhyming dictionary\n    word1 = word1.toUpperCase();\n    word2 = word2.toUpperCase();\n    rhyme1 = dict[word1];\n    rhyme2 = dict[word2]; // reject if rhymes not possible\n\n    if (!rhyme1 || !rhyme2 || rhyme1 === rhyme2) {\n      return false;\n    }\n\n    var xs = rhyme1.reduce(function (acc, w) {\n      acc[active(w)] = true;\n      return acc;\n    }, {});\n    var foundRhyme = rhyme2.some(function (p) {\n      return xs[active(p)];\n    });\n    return foundRhyme;\n  };\n\n  self.findRhymes = function (words) {\n    // see if words rhyme\n    var rhymes = [];\n\n    for (var w = 0; w < words.length - 1; w++) {\n      for (var w2 = w + 1; w2 < words.length; w2++) {\n        if (this.doRhyme(words[w], words[w2])) {\n          rhymes.push([words[w], words[w2]]);\n        }\n      }\n    }\n\n    return rhymes;\n  };\n\n  self.alliteration = function (word) {\n    word = word.toUpperCase();\n    if (!dict[word]) return [];\n\n    var firstSlice = function (ws) {\n      // active rhyming region: slice off the trailing consonants\n      for (var i = ws.length - 1; i > 0 && ws[i].match(/^[^AEIOU]/i); i--);\n\n      ws.splice(i + 1);\n      return ws.join(' ');\n    };\n\n    var xs = dict[word].reduce(function (acc, w) {\n      acc[firstSlice(w)] = true;\n      return acc;\n    }, {});\n    var rhymes = [];\n    Object.keys(dict).forEach(function (w) {\n      if (w === word) return;\n      var some = dict[w].some(function (p) {\n        return xs[firstSlice(p)];\n      });\n      if (some) rhymes.push(w);\n    }, []);\n    return rhymes;\n  };\n\n  var s = fs.createReadStream(dictFileDirect || dictFile);\n  s.on('end', function () {\n    cb(self);\n  });\n  Lazy(s).lines.map(String).forEach(function (line) {\n    if (line.match(/^[A-Z]/i)) {\n      var words = line.split(/\\s+/);\n      var w = words[0].replace(/\\(\\d+\\)$/, '');\n      if (!dict[w]) dict[w] = [];\n      dict[w].push(words.slice(1));\n    }\n  });\n};\n\nfunction active(ws) {\n  // active rhyming region: slice off the leading consonants\n  for (var i = 0; i < ws.length && ws[i].match(/^[^AEIOU]/i); i++);\n\n  return ws.slice(i).join(' ');\n}","map":{"version":3,"sources":["C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/rhyme-plus/index.js"],"names":["fs","require","Lazy","Hash","dictFile","__dirname","module","exports","cb","dictFileDirect","self","dict","pronounce","word","toUpperCase","syllables","prose","filter","ph","match","length","rhyme","xs","reduce","acc","w","active","rhymes","Object","keys","forEach","some","p","push","doRhyme","word1","word2","rhyme1","rhyme2","foundRhyme","findRhymes","words","w2","alliteration","firstSlice","ws","i","splice","join","s","createReadStream","on","lines","map","String","line","split","replace","slice"],"mappings":"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","sourcesContent":["var fs = require('fs');\nvar Lazy = require('lazy');\nvar Hash = require('hashish');\n\nvar dictFile = __dirname + '/data/cmudict.0.7a';\n\nmodule.exports = function (cb, dictFileDirect) {\n    var self = {};\n    var dict = {};\n\n    self.pronounce = function (word) {\n        return dict[word.toUpperCase()];\n    };\n\n    self.syllables = function (word) {\n        var prose = self.pronounce(word);\n        return prose && prose[0].filter(function (ph) {\n            return ph.match(/^[AEIOU]/);\n        }).length;\n    };\n\n    self.rhyme = function (word) {\n        word = word.toUpperCase();\n        if (!dict[word]) return [];\n\n        var xs = dict[word].reduce(function (acc, w) {\n            acc[active(w)] = true;\n            return acc;\n        }, {});\n\n        var rhymes = [];\n        Object.keys(dict).forEach(function (w) {\n            if (w === word) return;\n\n            var some = dict[w].some(function (p) {\n                return xs[active(p)];\n            });\n            if (some) rhymes.push(w);\n        }, []);\n        return rhymes;\n    };\n\n    self.doRhyme = function(word1, word2) {\n        // find words in rhyming dictionary\n        word1 = word1.toUpperCase();\n        word2 = word2.toUpperCase();\n        rhyme1 = dict[word1];\n        rhyme2 = dict[word2];\n\n        // reject if rhymes not possible\n        if (!rhyme1 || !rhyme2 || (rhyme1 === rhyme2)) {\n            return false;\n        }\n\n        var xs = rhyme1.reduce(function (acc, w) {\n            acc[active(w)] = true;\n            return acc;\n        }, {});\n\n        var foundRhyme = rhyme2.some(function (p) {\n            return xs[active(p)];\n        });\n\n        return foundRhyme;\n    };\n\n    self.findRhymes = function(words) {\n        // see if words rhyme\n        var rhymes = [];\n        for (var w = 0; w < words.length - 1; w++) {\n            for (var w2 = w + 1; w2 < words.length; w2++) {\n                if (this.doRhyme(words[w], words[w2])) {\n                    rhymes.push([words[w], words[w2]]);\n                }\n            }\n        }\n        return rhymes;\n    };\n\n    self.alliteration = function (word) {\n        word = word.toUpperCase();\n        if (!dict[word]) return [];\n\n        var firstSlice = function (ws) {\n            // active rhyming region: slice off the trailing consonants\n            for (\n                var i = ws.length - 1;\n                i > 0 && ws[i].match(/^[^AEIOU]/i);\n                i--\n            );\n            ws.splice(i + 1);\n            return ws.join(' ');\n        };\n\n        var xs = dict[word].reduce(function (acc, w) {\n            acc[firstSlice(w)] = true;\n            return acc;\n        }, {});\n\n        var rhymes = [];\n        Object.keys(dict).forEach(function (w) {\n            if (w === word) return;\n\n            var some = dict[w].some(function (p) {\n                return xs[firstSlice(p)];\n            });\n            if (some) rhymes.push(w);\n        }, []);\n        return rhymes;\n    };\n\n    var s = fs.createReadStream(dictFileDirect || dictFile);\n\n    s.on('end', function () {\n        cb(self);\n    });\n\n    Lazy(s).lines.map(String).forEach(function (line) {\n        if (line.match(/^[A-Z]/i)) {\n            var words = line.split(/\\s+/);\n            var w = words[0].replace(/\\(\\d+\\)$/, '');\n\n            if (!dict[w]) dict[w] = [];\n            dict[w].push(words.slice(1));\n        }\n    });\n};\n\nfunction active (ws) {\n    // active rhyming region: slice off the leading consonants\n    for (\n        var i = 0;\n        i < ws.length && ws[i].match(/^[^AEIOU]/i);\n        i++\n    );\n    return ws.slice(i).join(' ');\n}\n"]},"metadata":{},"sourceType":"script"}