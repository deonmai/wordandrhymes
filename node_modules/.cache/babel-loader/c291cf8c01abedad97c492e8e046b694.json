{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar procedure_1 = require(\"./procedure\");\n\nvar attributes = {\n  exists: 10,\n  equals: 8,\n  not: 7,\n  start: 6,\n  end: 6,\n  any: 5,\n  hyphen: 4,\n  element: 4\n};\n/**\n * Sort the parts of the passed selector,\n * as there is potential for optimization\n * (some types of selectors are faster than others)\n *\n * @param arr Selector to sort\n */\n\nfunction sortByProcedure(arr) {\n  var procs = arr.map(getProcedure);\n\n  for (var i = 1; i < arr.length; i++) {\n    var procNew = procs[i];\n    if (procNew < 0) continue;\n\n    for (var j = i - 1; j >= 0 && procNew < procs[j]; j--) {\n      var token = arr[j + 1];\n      arr[j + 1] = arr[j];\n      arr[j] = token;\n      procs[j + 1] = procs[j];\n      procs[j] = procNew;\n    }\n  }\n}\n\nexports.default = sortByProcedure;\n\nfunction getProcedure(token) {\n  var proc = procedure_1.procedure[token.type];\n\n  if (token.type === \"attribute\") {\n    proc = attributes[token.action];\n\n    if (proc === attributes.equals && token.name === \"id\") {\n      // Prefer ID selectors (eg. #ID)\n      proc = 9;\n    }\n\n    if (token.ignoreCase) {\n      /*\n       * IgnoreCase adds some overhead, prefer \"normal\" token\n       * this is a binary operation, to ensure it's still an int\n       */\n      proc >>= 1;\n    }\n  } else if (token.type === \"pseudo\") {\n    if (!token.data) {\n      proc = 3;\n    } else if (token.name === \"has\" || token.name === \"contains\") {\n      proc = 0; // Expensive in any case\n    } else if (Array.isArray(token.data)) {\n      // \"matches\" and \"not\"\n      proc = 0;\n\n      for (var i = 0; i < token.data.length; i++) {\n        // TODO better handling of complex selectors\n        if (token.data[i].length !== 1) continue;\n        var cur = getProcedure(token.data[i][0]); // Avoid executing :has or :contains\n\n        if (cur === 0) {\n          proc = 0;\n          break;\n        }\n\n        if (cur > proc) proc = cur;\n      }\n\n      if (token.data.length > 1 && proc > 0) proc -= 1;\n    } else {\n      proc = 1;\n    }\n  }\n\n  return proc;\n}","map":{"version":3,"sources":["C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/cheerio-select/node_modules/css-select/lib/sort.js"],"names":["Object","defineProperty","exports","value","procedure_1","require","attributes","exists","equals","not","start","end","any","hyphen","element","sortByProcedure","arr","procs","map","getProcedure","i","length","procNew","j","token","default","proc","procedure","type","action","name","ignoreCase","data","Array","isArray","cur"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAIC,UAAU,GAAG;AACbC,EAAAA,MAAM,EAAE,EADK;AAEbC,EAAAA,MAAM,EAAE,CAFK;AAGbC,EAAAA,GAAG,EAAE,CAHQ;AAIbC,EAAAA,KAAK,EAAE,CAJM;AAKbC,EAAAA,GAAG,EAAE,CALQ;AAMbC,EAAAA,GAAG,EAAE,CANQ;AAObC,EAAAA,MAAM,EAAE,CAPK;AAQbC,EAAAA,OAAO,EAAE;AARI,CAAjB;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAyBC,GAAzB,EAA8B;AAC1B,MAAIC,KAAK,GAAGD,GAAG,CAACE,GAAJ,CAAQC,YAAR,CAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACK,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,QAAIE,OAAO,GAAGL,KAAK,CAACG,CAAD,CAAnB;AACA,QAAIE,OAAO,GAAG,CAAd,EACI;;AACJ,SAAK,IAAIC,CAAC,GAAGH,CAAC,GAAG,CAAjB,EAAoBG,CAAC,IAAI,CAAL,IAAUD,OAAO,GAAGL,KAAK,CAACM,CAAD,CAA7C,EAAkDA,CAAC,EAAnD,EAAuD;AACnD,UAAIC,KAAK,GAAGR,GAAG,CAACO,CAAC,GAAG,CAAL,CAAf;AACAP,MAAAA,GAAG,CAACO,CAAC,GAAG,CAAL,CAAH,GAAaP,GAAG,CAACO,CAAD,CAAhB;AACAP,MAAAA,GAAG,CAACO,CAAD,CAAH,GAASC,KAAT;AACAP,MAAAA,KAAK,CAACM,CAAC,GAAG,CAAL,CAAL,GAAeN,KAAK,CAACM,CAAD,CAApB;AACAN,MAAAA,KAAK,CAACM,CAAD,CAAL,GAAWD,OAAX;AACH;AACJ;AACJ;;AACDpB,OAAO,CAACuB,OAAR,GAAkBV,eAAlB;;AACA,SAASI,YAAT,CAAsBK,KAAtB,EAA6B;AACzB,MAAIE,IAAI,GAAGtB,WAAW,CAACuB,SAAZ,CAAsBH,KAAK,CAACI,IAA5B,CAAX;;AACA,MAAIJ,KAAK,CAACI,IAAN,KAAe,WAAnB,EAAgC;AAC5BF,IAAAA,IAAI,GAAGpB,UAAU,CAACkB,KAAK,CAACK,MAAP,CAAjB;;AACA,QAAIH,IAAI,KAAKpB,UAAU,CAACE,MAApB,IAA8BgB,KAAK,CAACM,IAAN,KAAe,IAAjD,EAAuD;AACnD;AACAJ,MAAAA,IAAI,GAAG,CAAP;AACH;;AACD,QAAIF,KAAK,CAACO,UAAV,EAAsB;AAClB;AACZ;AACA;AACA;AACYL,MAAAA,IAAI,KAAK,CAAT;AACH;AACJ,GAbD,MAcK,IAAIF,KAAK,CAACI,IAAN,KAAe,QAAnB,EAA6B;AAC9B,QAAI,CAACJ,KAAK,CAACQ,IAAX,EAAiB;AACbN,MAAAA,IAAI,GAAG,CAAP;AACH,KAFD,MAGK,IAAIF,KAAK,CAACM,IAAN,KAAe,KAAf,IAAwBN,KAAK,CAACM,IAAN,KAAe,UAA3C,EAAuD;AACxDJ,MAAAA,IAAI,GAAG,CAAP,CADwD,CAC9C;AACb,KAFI,MAGA,IAAIO,KAAK,CAACC,OAAN,CAAcV,KAAK,CAACQ,IAApB,CAAJ,EAA+B;AAChC;AACAN,MAAAA,IAAI,GAAG,CAAP;;AACA,WAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,KAAK,CAACQ,IAAN,CAAWX,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC;AACA,YAAII,KAAK,CAACQ,IAAN,CAAWZ,CAAX,EAAcC,MAAd,KAAyB,CAA7B,EACI;AACJ,YAAIc,GAAG,GAAGhB,YAAY,CAACK,KAAK,CAACQ,IAAN,CAAWZ,CAAX,EAAc,CAAd,CAAD,CAAtB,CAJwC,CAKxC;;AACA,YAAIe,GAAG,KAAK,CAAZ,EAAe;AACXT,UAAAA,IAAI,GAAG,CAAP;AACA;AACH;;AACD,YAAIS,GAAG,GAAGT,IAAV,EACIA,IAAI,GAAGS,GAAP;AACP;;AACD,UAAIX,KAAK,CAACQ,IAAN,CAAWX,MAAX,GAAoB,CAApB,IAAyBK,IAAI,GAAG,CAApC,EACIA,IAAI,IAAI,CAAR;AACP,KAlBI,MAmBA;AACDA,MAAAA,IAAI,GAAG,CAAP;AACH;AACJ;;AACD,SAAOA,IAAP;AACH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar procedure_1 = require(\"./procedure\");\nvar attributes = {\n    exists: 10,\n    equals: 8,\n    not: 7,\n    start: 6,\n    end: 6,\n    any: 5,\n    hyphen: 4,\n    element: 4,\n};\n/**\n * Sort the parts of the passed selector,\n * as there is potential for optimization\n * (some types of selectors are faster than others)\n *\n * @param arr Selector to sort\n */\nfunction sortByProcedure(arr) {\n    var procs = arr.map(getProcedure);\n    for (var i = 1; i < arr.length; i++) {\n        var procNew = procs[i];\n        if (procNew < 0)\n            continue;\n        for (var j = i - 1; j >= 0 && procNew < procs[j]; j--) {\n            var token = arr[j + 1];\n            arr[j + 1] = arr[j];\n            arr[j] = token;\n            procs[j + 1] = procs[j];\n            procs[j] = procNew;\n        }\n    }\n}\nexports.default = sortByProcedure;\nfunction getProcedure(token) {\n    var proc = procedure_1.procedure[token.type];\n    if (token.type === \"attribute\") {\n        proc = attributes[token.action];\n        if (proc === attributes.equals && token.name === \"id\") {\n            // Prefer ID selectors (eg. #ID)\n            proc = 9;\n        }\n        if (token.ignoreCase) {\n            /*\n             * IgnoreCase adds some overhead, prefer \"normal\" token\n             * this is a binary operation, to ensure it's still an int\n             */\n            proc >>= 1;\n        }\n    }\n    else if (token.type === \"pseudo\") {\n        if (!token.data) {\n            proc = 3;\n        }\n        else if (token.name === \"has\" || token.name === \"contains\") {\n            proc = 0; // Expensive in any case\n        }\n        else if (Array.isArray(token.data)) {\n            // \"matches\" and \"not\"\n            proc = 0;\n            for (var i = 0; i < token.data.length; i++) {\n                // TODO better handling of complex selectors\n                if (token.data[i].length !== 1)\n                    continue;\n                var cur = getProcedure(token.data[i][0]);\n                // Avoid executing :has or :contains\n                if (cur === 0) {\n                    proc = 0;\n                    break;\n                }\n                if (cur > proc)\n                    proc = cur;\n            }\n            if (token.data.length > 1 && proc > 0)\n                proc -= 1;\n        }\n        else {\n            proc = 1;\n        }\n    }\n    return proc;\n}\n"]},"metadata":{},"sourceType":"script"}