{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _asyncToGenerator = require(\"C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar fetch = require('node-fetch');\n\nvar RHYME = {\n  perfect: 'rhy',\n  // 'rhy' is the code the Datamuse API uses for perfect rhymes\n  near: 'nry'\n};\n\nvar getRhymes = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(word) {\n    var perfectRhymes, nearRhymes;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getRhymesOfType(word, RHYME.perfect);\n\n          case 2:\n            perfectRhymes = _context.sent;\n            _context.next = 5;\n            return getRhymesOfType(word, RHYME.near);\n\n          case 5:\n            nearRhymes = _context.sent;\n            return _context.abrupt(\"return\", [].concat(_toConsumableArray(perfectRhymes), _toConsumableArray(nearRhymes)));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getRhymes(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getRhymesOfType = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(word, rhymeType) {\n    var url, results, words;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            url = getDatamuseUrl(word, rhymeType);\n            _context2.next = 3;\n            return fetch(url).then(function (res) {\n              return res.json();\n            });\n\n          case 3:\n            results = _context2.sent;\n            words = results.map(function (result) {\n              return result.word;\n            });\n            return _context2.abrupt(\"return\", words);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getRhymesOfType(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar getDatamuseUrl = function getDatamuseUrl(word, rhymeType) {\n  word = global.encodeURIComponent(word);\n  return \"https://api.datamuse.com/words?rel_\".concat(rhymeType, \"=\").concat(word);\n};\n\nmodule.exports = getRhymes;","map":{"version":3,"sources":["C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/get-rhymes/src/datamuse.js"],"names":["fetch","require","RHYME","perfect","near","getRhymes","word","getRhymesOfType","perfectRhymes","nearRhymes","rhymeType","url","getDatamuseUrl","then","res","json","results","words","map","result","global","encodeURIComponent","module","exports"],"mappings":";;;;;;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,OAAO,EAAE,KADG;AACI;AAChBC,EAAAA,IAAI,EAAE;AAFM,CAAd;;AAKA,IAAMC,SAAS;AAAA,sEAAG,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACYC,eAAe,CAACD,IAAD,EAAOJ,KAAK,CAACC,OAAb,CAD3B;;AAAA;AACVK,YAAAA,aADU;AAAA;AAAA,mBAESD,eAAe,CAACD,IAAD,EAAOJ,KAAK,CAACE,IAAb,CAFxB;;AAAA;AAEVK,YAAAA,UAFU;AAAA,0EAGLD,aAHK,sBAGaC,UAHb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATJ,SAAS;AAAA;AAAA;AAAA,GAAf;;AAMA,IAAME,eAAe;AAAA,uEAAG,kBAAOD,IAAP,EAAaI,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,YAAAA,GADgB,GACVC,cAAc,CAACN,IAAD,EAAOI,SAAP,CADJ;AAAA;AAAA,mBAEAV,KAAK,CAACW,GAAD,CAAL,CAAWE,IAAX,CAAgB,UAAAC,GAAG;AAAA,qBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,aAAnB,CAFA;;AAAA;AAEhBC,YAAAA,OAFgB;AAGhBC,YAAAA,KAHgB,GAGRD,OAAO,CAACE,GAAR,CAAY,UAAAC,MAAM;AAAA,qBAAIA,MAAM,CAACb,IAAX;AAAA,aAAlB,CAHQ;AAAA,8CAIfW,KAJe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfV,eAAe;AAAA;AAAA;AAAA,GAArB;;AAOA,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,CAACN,IAAD,EAAOI,SAAP,EAAqB;AAC1CJ,EAAAA,IAAI,GAAGc,MAAM,CAACC,kBAAP,CAA0Bf,IAA1B,CAAP;AACA,sDAA6CI,SAA7C,cAA0DJ,IAA1D;AACD,CAHD;;AAKAgB,MAAM,CAACC,OAAP,GAAiBlB,SAAjB","sourcesContent":["const fetch = require('node-fetch')\n\nconst RHYME = {\n  perfect: 'rhy', // 'rhy' is the code the Datamuse API uses for perfect rhymes\n  near: 'nry'\n}\n\nconst getRhymes = async word => {\n  const perfectRhymes = await getRhymesOfType(word, RHYME.perfect)\n  const nearRhymes = await getRhymesOfType(word, RHYME.near)\n  return [...perfectRhymes, ...nearRhymes]\n}\n\nconst getRhymesOfType = async (word, rhymeType) => {\n  const url = getDatamuseUrl(word, rhymeType)\n  const results = await fetch(url).then(res => res.json())\n  const words = results.map(result => result.word)\n  return words\n}\n\nconst getDatamuseUrl = (word, rhymeType) => {\n  word = global.encodeURIComponent(word)\n  return `https://api.datamuse.com/words?rel_${rhymeType}=${word}`\n}\n\nmodule.exports = getRhymes\n"]},"metadata":{},"sourceType":"script"}