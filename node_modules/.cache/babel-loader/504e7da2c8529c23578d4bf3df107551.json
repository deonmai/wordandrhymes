{"ast":null,"code":"\"use strict\";\n\nvar Buffer = require(\"safer-buffer\").Buffer; // Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js\n// == UTF16-BE codec. ==========================================================\n\n\nexports.utf16be = Utf16BECodec;\n\nfunction Utf16BECodec() {}\n\nUtf16BECodec.prototype.encoder = Utf16BEEncoder;\nUtf16BECodec.prototype.decoder = Utf16BEDecoder;\nUtf16BECodec.prototype.bomAware = true; // -- Encoding\n\nfunction Utf16BEEncoder() {}\n\nUtf16BEEncoder.prototype.write = function (str) {\n  var buf = Buffer.from(str, 'ucs2');\n\n  for (var i = 0; i < buf.length; i += 2) {\n    var tmp = buf[i];\n    buf[i] = buf[i + 1];\n    buf[i + 1] = tmp;\n  }\n\n  return buf;\n};\n\nUtf16BEEncoder.prototype.end = function () {}; // -- Decoding\n\n\nfunction Utf16BEDecoder() {\n  this.overflowByte = -1;\n}\n\nUtf16BEDecoder.prototype.write = function (buf) {\n  if (buf.length == 0) return '';\n  var buf2 = Buffer.alloc(buf.length + 1),\n      i = 0,\n      j = 0;\n\n  if (this.overflowByte !== -1) {\n    buf2[0] = buf[0];\n    buf2[1] = this.overflowByte;\n    i = 1;\n    j = 2;\n  }\n\n  for (; i < buf.length - 1; i += 2, j += 2) {\n    buf2[j] = buf[i + 1];\n    buf2[j + 1] = buf[i];\n  }\n\n  this.overflowByte = i == buf.length - 1 ? buf[buf.length - 1] : -1;\n  return buf2.slice(0, j).toString('ucs2');\n};\n\nUtf16BEDecoder.prototype.end = function () {\n  this.overflowByte = -1;\n}; // == UTF-16 codec =============================================================\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\n\n\nexports.utf16 = Utf16Codec;\n\nfunction Utf16Codec(codecOptions, iconv) {\n  this.iconv = iconv;\n}\n\nUtf16Codec.prototype.encoder = Utf16Encoder;\nUtf16Codec.prototype.decoder = Utf16Decoder; // -- Encoding (pass-through)\n\nfunction Utf16Encoder(options, codec) {\n  options = options || {};\n  if (options.addBOM === undefined) options.addBOM = true;\n  this.encoder = codec.iconv.getEncoder('utf-16le', options);\n}\n\nUtf16Encoder.prototype.write = function (str) {\n  return this.encoder.write(str);\n};\n\nUtf16Encoder.prototype.end = function () {\n  return this.encoder.end();\n}; // -- Decoding\n\n\nfunction Utf16Decoder(options, codec) {\n  this.decoder = null;\n  this.initialBufs = [];\n  this.initialBufsLen = 0;\n  this.options = options || {};\n  this.iconv = codec.iconv;\n}\n\nUtf16Decoder.prototype.write = function (buf) {\n  if (!this.decoder) {\n    // Codec is not chosen yet. Accumulate initial bytes.\n    this.initialBufs.push(buf);\n    this.initialBufsLen += buf.length;\n    if (this.initialBufsLen < 16) // We need more bytes to use space heuristic (see below)\n      return ''; // We have enough bytes -> detect endianness.\n\n    var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);\n    this.decoder = this.iconv.getDecoder(encoding, this.options);\n    var resStr = '';\n\n    for (var i = 0; i < this.initialBufs.length; i++) {\n      resStr += this.decoder.write(this.initialBufs[i]);\n    }\n\n    this.initialBufs.length = this.initialBufsLen = 0;\n    return resStr;\n  }\n\n  return this.decoder.write(buf);\n};\n\nUtf16Decoder.prototype.end = function () {\n  if (!this.decoder) {\n    var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);\n    this.decoder = this.iconv.getDecoder(encoding, this.options);\n    var resStr = '';\n\n    for (var i = 0; i < this.initialBufs.length; i++) {\n      resStr += this.decoder.write(this.initialBufs[i]);\n    }\n\n    var trail = this.decoder.end();\n    if (trail) resStr += trail;\n    this.initialBufs.length = this.initialBufsLen = 0;\n    return resStr;\n  }\n\n  return this.decoder.end();\n};\n\nfunction detectEncoding(bufs, defaultEncoding) {\n  var b = [];\n  var charsProcessed = 0;\n  var asciiCharsLE = 0,\n      asciiCharsBE = 0; // Number of ASCII chars when decoded as LE or BE.\n\n  outer_loop: for (var i = 0; i < bufs.length; i++) {\n    var buf = bufs[i];\n\n    for (var j = 0; j < buf.length; j++) {\n      b.push(buf[j]);\n\n      if (b.length === 2) {\n        if (charsProcessed === 0) {\n          // Check BOM first.\n          if (b[0] === 0xFF && b[1] === 0xFE) return 'utf-16le';\n          if (b[0] === 0xFE && b[1] === 0xFF) return 'utf-16be';\n        }\n\n        if (b[0] === 0 && b[1] !== 0) asciiCharsBE++;\n        if (b[0] !== 0 && b[1] === 0) asciiCharsLE++;\n        b.length = 0;\n        charsProcessed++;\n\n        if (charsProcessed >= 100) {\n          break outer_loop;\n        }\n      }\n    }\n  } // Make decisions.\n  // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\n  // So, we count ASCII as if it was LE or BE, and decide from that.\n\n\n  if (asciiCharsBE > asciiCharsLE) return 'utf-16be';\n  if (asciiCharsBE < asciiCharsLE) return 'utf-16le'; // Couldn't decide (likely all zeros or not enough data).\n\n  return defaultEncoding || 'utf-16le';\n}","map":{"version":3,"sources":["C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/encoding/node_modules/iconv-lite/encodings/utf16.js"],"names":["Buffer","require","exports","utf16be","Utf16BECodec","prototype","encoder","Utf16BEEncoder","decoder","Utf16BEDecoder","bomAware","write","str","buf","from","i","length","tmp","end","overflowByte","buf2","alloc","j","slice","toString","utf16","Utf16Codec","codecOptions","iconv","Utf16Encoder","Utf16Decoder","options","codec","addBOM","undefined","getEncoder","initialBufs","initialBufsLen","push","encoding","detectEncoding","defaultEncoding","getDecoder","resStr","trail","bufs","b","charsProcessed","asciiCharsLE","asciiCharsBE","outer_loop"],"mappings":"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","sourcesContent":["\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js\n\n// == UTF16-BE codec. ==========================================================\n\nexports.utf16be = Utf16BECodec;\nfunction Utf16BECodec() {\n}\n\nUtf16BECodec.prototype.encoder = Utf16BEEncoder;\nUtf16BECodec.prototype.decoder = Utf16BEDecoder;\nUtf16BECodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf16BEEncoder() {\n}\n\nUtf16BEEncoder.prototype.write = function(str) {\n    var buf = Buffer.from(str, 'ucs2');\n    for (var i = 0; i < buf.length; i += 2) {\n        var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;\n    }\n    return buf;\n}\n\nUtf16BEEncoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf16BEDecoder() {\n    this.overflowByte = -1;\n}\n\nUtf16BEDecoder.prototype.write = function(buf) {\n    if (buf.length == 0)\n        return '';\n\n    var buf2 = Buffer.alloc(buf.length + 1),\n        i = 0, j = 0;\n\n    if (this.overflowByte !== -1) {\n        buf2[0] = buf[0];\n        buf2[1] = this.overflowByte;\n        i = 1; j = 2;\n    }\n\n    for (; i < buf.length-1; i += 2, j+= 2) {\n        buf2[j] = buf[i+1];\n        buf2[j+1] = buf[i];\n    }\n\n    this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;\n\n    return buf2.slice(0, j).toString('ucs2');\n}\n\nUtf16BEDecoder.prototype.end = function() {\n    this.overflowByte = -1;\n}\n\n\n// == UTF-16 codec =============================================================\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\n\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\n\nexports.utf16 = Utf16Codec;\nfunction Utf16Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n}\n\nUtf16Codec.prototype.encoder = Utf16Encoder;\nUtf16Codec.prototype.decoder = Utf16Decoder;\n\n\n// -- Encoding (pass-through)\n\nfunction Utf16Encoder(options, codec) {\n    options = options || {};\n    if (options.addBOM === undefined)\n        options.addBOM = true;\n    this.encoder = codec.iconv.getEncoder('utf-16le', options);\n}\n\nUtf16Encoder.prototype.write = function(str) {\n    return this.encoder.write(str);\n}\n\nUtf16Encoder.prototype.end = function() {\n    return this.encoder.end();\n}\n\n\n// -- Decoding\n\nfunction Utf16Decoder(options, codec) {\n    this.decoder = null;\n    this.initialBufs = [];\n    this.initialBufsLen = 0;\n\n    this.options = options || {};\n    this.iconv = codec.iconv;\n}\n\nUtf16Decoder.prototype.write = function(buf) {\n    if (!this.decoder) {\n        // Codec is not chosen yet. Accumulate initial bytes.\n        this.initialBufs.push(buf);\n        this.initialBufsLen += buf.length;\n        \n        if (this.initialBufsLen < 16) // We need more bytes to use space heuristic (see below)\n            return '';\n\n        // We have enough bytes -> detect endianness.\n        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var resStr = '';\n        for (var i = 0; i < this.initialBufs.length; i++)\n            resStr += this.decoder.write(this.initialBufs[i]);\n\n        this.initialBufs.length = this.initialBufsLen = 0;\n        return resStr;\n    }\n\n    return this.decoder.write(buf);\n}\n\nUtf16Decoder.prototype.end = function() {\n    if (!this.decoder) {\n        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var resStr = '';\n        for (var i = 0; i < this.initialBufs.length; i++)\n            resStr += this.decoder.write(this.initialBufs[i]);\n\n        var trail = this.decoder.end();\n        if (trail)\n            resStr += trail;\n\n        this.initialBufs.length = this.initialBufsLen = 0;\n        return resStr;\n    }\n    return this.decoder.end();\n}\n\nfunction detectEncoding(bufs, defaultEncoding) {\n    var b = [];\n    var charsProcessed = 0;\n    var asciiCharsLE = 0, asciiCharsBE = 0; // Number of ASCII chars when decoded as LE or BE.\n\n    outer_loop:\n    for (var i = 0; i < bufs.length; i++) {\n        var buf = bufs[i];\n        for (var j = 0; j < buf.length; j++) {\n            b.push(buf[j]);\n            if (b.length === 2) {\n                if (charsProcessed === 0) {\n                    // Check BOM first.\n                    if (b[0] === 0xFF && b[1] === 0xFE) return 'utf-16le';\n                    if (b[0] === 0xFE && b[1] === 0xFF) return 'utf-16be';\n                }\n\n                if (b[0] === 0 && b[1] !== 0) asciiCharsBE++;\n                if (b[0] !== 0 && b[1] === 0) asciiCharsLE++;\n\n                b.length = 0;\n                charsProcessed++;\n\n                if (charsProcessed >= 100) {\n                    break outer_loop;\n                }\n            }\n        }\n    }\n\n    // Make decisions.\n    // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\n    // So, we count ASCII as if it was LE or BE, and decide from that.\n    if (asciiCharsBE > asciiCharsLE) return 'utf-16be';\n    if (asciiCharsBE < asciiCharsLE) return 'utf-16le';\n\n    // Couldn't decide (likely all zeros or not enough data).\n    return defaultEncoding || 'utf-16le';\n}\n\n\n"]},"metadata":{},"sourceType":"script"}