{"ast":null,"code":"var dict = require('cmu-pronouncing-dictionary');\n\nvar own = {}.hasOwnProperty;\nvar words = [];\nObject.keys(dict).forEach(function (word) {\n  words.push({\n    word: word,\n    pron: dict[word]\n  });\n});\nmodule.exports = rhymes;\nrhymes.words = words;\n\nfunction rhymes(value) {\n  var results = [];\n  var pron;\n  if (!value) return results;\n  value = String(value).toLowerCase();\n  if (!own.call(dict, value)) return results;\n  pron = dict[value];\n  words.forEach(check);\n  return results.sort(sort).slice(0, 20);\n\n  function check(other) {\n    var score = countMatchingTrailingSyllables(pron, other.pron);\n\n    if (score > 1) {\n      results.push({\n        score: score,\n        pron: other.pron,\n        word: cleanAlternative(other.word)\n      });\n    }\n  }\n}\n\nfunction countMatchingTrailingSyllables(a, b) {\n  var left = reverseSyllables(a);\n  var right = reverseSyllables(b);\n  var length = Math.max(left.length, right.length);\n  var index = -1;\n  var score = 0;\n\n  while (++index < length) {\n    if (left[index] !== right[index]) {\n      return score;\n    }\n\n    score++;\n  } // Do not return words with exactly the same pronunciation (`kat` for `cat`)\n\n\n  return 0;\n} // `donkey(1)` -> `donkey`\n\n\nfunction cleanAlternative(word) {\n  var pos = word.indexOf('(');\n  return pos === -1 ? word : word.slice(0, pos);\n}\n\nfunction reverseSyllables(d) {\n  return d.split(' ').reverse();\n}\n\nfunction sort(a, b) {\n  return pick(b) - pick(a) || a.word.localeCompare(b.word);\n}\n\nfunction pick(d) {\n  return d.score;\n}","map":{"version":3,"sources":["C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/rhymes/index.js"],"names":["dict","require","own","hasOwnProperty","words","Object","keys","forEach","word","push","pron","module","exports","rhymes","value","results","String","toLowerCase","call","check","sort","slice","other","score","countMatchingTrailingSyllables","cleanAlternative","a","b","left","reverseSyllables","right","length","Math","max","index","pos","indexOf","d","split","reverse","pick","localeCompare"],"mappings":"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","sourcesContent":["var dict = require('cmu-pronouncing-dictionary')\n\nvar own = {}.hasOwnProperty\n\nvar words = []\n\nObject.keys(dict).forEach(function(word) {\n  words.push({word: word, pron: dict[word]})\n})\n\nmodule.exports = rhymes\nrhymes.words = words\n\nfunction rhymes(value) {\n  var results = []\n  var pron\n\n  if (!value) return results\n\n  value = String(value).toLowerCase()\n\n  if (!own.call(dict, value)) return results\n\n  pron = dict[value]\n\n  words.forEach(check)\n\n  return results.sort(sort).slice(0, 20)\n\n  function check(other) {\n    var score = countMatchingTrailingSyllables(pron, other.pron)\n\n    if (score > 1) {\n      results.push({\n        score: score,\n        pron: other.pron,\n        word: cleanAlternative(other.word)\n      })\n    }\n  }\n}\n\nfunction countMatchingTrailingSyllables(a, b) {\n  var left = reverseSyllables(a)\n  var right = reverseSyllables(b)\n  var length = Math.max(left.length, right.length)\n  var index = -1\n  var score = 0\n\n  while (++index < length) {\n    if (left[index] !== right[index]) {\n      return score\n    }\n\n    score++\n  }\n\n  // Do not return words with exactly the same pronunciation (`kat` for `cat`)\n  return 0\n}\n\n// `donkey(1)` -> `donkey`\nfunction cleanAlternative(word) {\n  var pos = word.indexOf('(')\n  return pos === -1 ? word : word.slice(0, pos)\n}\n\nfunction reverseSyllables(d) {\n  return d.split(' ').reverse()\n}\n\nfunction sort(a, b) {\n  return pick(b) - pick(a) || a.word.localeCompare(b.word)\n}\n\nfunction pick(d) {\n  return d.score\n}\n"]},"metadata":{},"sourceType":"script"}