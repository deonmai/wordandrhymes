{"ast":null,"code":"var parser = require(\"./parser.js\");\n\nfunction getDef(word, lng, options, callback) {\n  if (typeof callback != \"function\") throw \"word-definition error: no callback specified (getDef function).\";\n  if (typeof options != \"object\") throw \"word-definition error: options should be an object or null (getDef function).\";\n  if (!word || /[^\\wœß]/.test(parser.stripAccents(word))) callback({\n    word: word,\n    err: \"invalid characters\"\n  });else if (!parsers[lng]) callback({\n    word: word,\n    err: \"unsupported language\"\n  });else new parsers[lng](word, options, callback).getTitles();\n}\n\nvar languages = [{\n  lng: \"en\",\n  variants: [/^({{[^}]+}}\\s*)*\\[\\[([^\\]#|]+)[^\\]]*\\]\\]\\.*$/i, /\\s*{{(([^|]+ of)|(alt form))\\|([^}|]+)/],\n  searchDef: function (page) {\n    var def = \"\";\n    var cats = this.cat || \"(Verb)|(Noun)|(Adjective)|(Adverb)|(Conjunction)|(Preposition)|\" + \"(Determiner)|(Article)|(Pronoun)|(Interjection)\";\n    var match = new RegExp(\"===(\" + cats + \")===[^]+\").exec(page);\n\n    if (match) {\n      var match2 = /\\n{{((en-)|(head\\|en)).+([^]+)/.exec(match[0]);\n\n      if (match2) {\n        var match3 = /\\n#\\s(.+)/.exec(match2[4]);\n\n        if (match3) {\n          def = match3[1].trim();\n          this.cat = match[1];\n          var nonGloss = /{{non-gloss definition\\|([^}]+)}}/.exec(def);\n          if (nonGloss) def = this.cat + \" \" + nonGloss[1];\n        }\n      }\n    }\n\n    return def;\n  }\n}, {\n  lng: \"fr\",\n  variants: [/{{variante [^|]*\\|([^|}]+)/i, /^{{cf\\|([^}]+)}}\\s*\\.*$/i, /^({{[^}]+}}\\s*)*'*((Variante)|(Autre)|(Voir)|(Synonyme)|(Mauvaise orthographe))[^[]+\\[\\[([^\\]#|]+)\\]\\]/i, /^({{[^}]+}}\\s*)*\\[\\[([^\\]#|]+)[^\\]]*\\]\\]\\.*$/i],\n  searchDef: function (page) {\n    var def = \"\";\n    var cats = this.cat || \"(nom)|(verbe)|(adjectif([^|]*))|(adverbe)|(conjonction[^|]*)|\" + \"(article[^|]*)|(pronom[^|]*)|(interjection)|(préposition)|(onomatopée)|(variante typographique)\";\n    var match = new RegExp(\"{{S\\\\|(\" + cats + \")(\\\\|num=\\\\d+)*\\\\|fr(\\\\|num=\\\\d+)*(\\\\|flexion)*.+(\\\\n[^#].+)*\\\\n#\\\\s*(.+)(\\\\n##(.+)){0,1}\").exec(page);\n\n    if (match) {\n      var nMatches = match.length;\n      def = match[nMatches - 3].trim();\n      if (match[nMatches - 1] && def.replace(/{{[^}]*}}/g, \"\").trim() == \"\") def = match[nMatches - 1].trim();\n\n      if (def) {\n        this.cat = match[1] == \"variante typographique\" ? \"\" : match[1];\n\n        if (match[nMatches - 5]) {\n          var redirect = /\\[\\[([^#\\-|\\]]+)[^\\]]*\\]\\]['\\s\\.]*$/.exec(def);\n\n          if (redirect) {\n            if (/^(verbe)|(adjectif)$/.test(this.cat)) this.cat = \"(verbe(\\\\|num=\\\\d+)*)|(adjectif)\";\n            this.titles[0] = redirect[1]; // console.log(this.word + \" : inflection ==> \" + redirect[1]);\n            // this.word = redirect[1];\n\n            this.getPage();\n            def = true;\n          } else if (this.cat == \"(verbe)|(adjectif)\") this.cat = match[1];\n        }\n      }\n    }\n\n    return def;\n  }\n}, {\n  lng: \"de\",\n  variants: [],\n  searchDef: function (page) {\n    var def = \"\";\n    var cats = this.cat || \"(Konjugierte Form)|(Deklinierte Form)|(Substantiv)|(Verb)|(Partizip[^|]*)|\" + \"(Adjektiv)|(Konjunktion)|(Subjunktion)|(Artikel)|(Numerale)|(Onomatopoetikum)|(Interjektion)|(.+)\";\n    var match = new RegExp(\"{{Wortart\\\\|(\" + cats + \")\\\\|Deutsch}}[^]+\").exec(page);\n    var found = !!match;\n\n    if (found) {\n      if (match.length == 14 && match[13]) found = /(adverb)|(partikel)|(pronomen)$/.test(match[13]);\n    } else {\n      var newSpelling = /{{Alte Schreibweise\\|([^|]+)\\|/.exec(page);\n\n      if (newSpelling) {\n        this.titles[0] = newSpelling[1];\n        this.getPage();\n        def = true;\n      }\n    }\n\n    if (found) {\n      switch (match[1]) {\n        case \"Konjugierte Form\":\n        case \"Deklinierte Form\":\n          var redirect = /{{Grammatische Merkmale}}\\n+[^\\[]+\\[\\[([^\\]|]+)/.exec(match[0]);\n\n          if (redirect) {\n            this.titles[0] = redirect[1].replace(/[^a-zäöüß]/gi, \"\");\n            this.getPage();\n            def = true;\n          }\n\n          break;\n\n        default:\n          var match2 = /\\n{{Bedeutungen}}\\n:\\[1\\](.*)/.exec(match[0]);\n\n          if (match2) {\n            def = match2[1].trim();\n            this.cat = match[1];\n          }\n\n      }\n    }\n\n    return def;\n  }\n}];\nvar parsers = {};\nlanguages.forEach(function (props) {\n  var p = parsers[props.lng] = function (word, options, callback) {\n    this.base = parser.parser;\n    this.base(word, props.lng, options, callback);\n  };\n\n  var proto = p.prototype = new parser.parser();\n  proto.variants = props.variants;\n  proto.searchDef = props.searchDef;\n});\nmodule.exports.getDef = getDef;","map":{"version":3,"sources":["C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/word-definition/index.js"],"names":["parser","require","getDef","word","lng","options","callback","test","stripAccents","err","parsers","getTitles","languages","variants","searchDef","page","def","cats","cat","match","RegExp","exec","match2","match3","trim","nonGloss","nMatches","length","replace","redirect","titles","getPage","found","newSpelling","forEach","props","p","base","proto","prototype","module","exports"],"mappings":"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","sourcesContent":["\r\nvar parser = require(\"./parser.js\");\r\n\r\nfunction getDef(word, lng, options, callback) {\r\n\r\n\tif(typeof callback != \"function\") throw \"word-definition error: no callback specified (getDef function).\";\r\n\tif(typeof options != \"object\") throw \"word-definition error: options should be an object or null (getDef function).\";\r\n\r\n\tif(!word || /[^\\wœß]/.test(parser.stripAccents(word))) callback({ word: word, err: \"invalid characters\" });\r\n\telse if(!parsers[lng]) callback({ word: word, err: \"unsupported language\" });\r\n\telse new parsers[lng](word, options, callback).getTitles();\r\n\r\n}\r\n\r\nvar languages = [\r\n\r\n\t{\r\n\r\n\t\tlng: \"en\",\r\n\r\n\t\tvariants: [\r\n\t\t\t/^({{[^}]+}}\\s*)*\\[\\[([^\\]#|]+)[^\\]]*\\]\\]\\.*$/i,\r\n\t\t\t/\\s*{{(([^|]+ of)|(alt form))\\|([^}|]+)/\r\n\t\t],\r\n\r\n\t\tsearchDef: function(page) {\r\n\r\n\t\t\tvar def = \"\";\r\n\r\n\t\t\tvar cats = this.cat || \"(Verb)|(Noun)|(Adjective)|(Adverb)|(Conjunction)|(Preposition)|\" +\r\n\t\t\t\t\"(Determiner)|(Article)|(Pronoun)|(Interjection)\";\r\n\r\n\t\t\tvar match = new RegExp(\"===(\" + cats + \")===[^]+\").exec(page);\r\n\r\n\t\t\tif(match) {\r\n\t\t\t\tvar match2 = /\\n{{((en-)|(head\\|en)).+([^]+)/.exec(match[0]);\r\n\t\t\t\tif(match2) {\r\n\t\t\t\t\tvar match3 = /\\n#\\s(.+)/.exec(match2[4]);\r\n\t\t\t\t\tif(match3) {\r\n\t\t\t\t\t\tdef = match3[1].trim();\r\n\t\t\t\t\t\tthis.cat = match[1];\r\n\t\t\t\t\t\tvar nonGloss = /{{non-gloss definition\\|([^}]+)}}/.exec(def);\r\n\t\t\t\t\t\tif(nonGloss) def = this.cat + \" \" + nonGloss[1];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn def;\r\n\t\t}\r\n\t},\r\n\r\n\t{\r\n\r\n\t\tlng: \"fr\",\r\n\r\n\t\tvariants: [\r\n\t\t\t/{{variante [^|]*\\|([^|}]+)/i,\r\n\t\t\t/^{{cf\\|([^}]+)}}\\s*\\.*$/i,\r\n\t\t\t/^({{[^}]+}}\\s*)*'*((Variante)|(Autre)|(Voir)|(Synonyme)|(Mauvaise orthographe))[^[]+\\[\\[([^\\]#|]+)\\]\\]/i,\r\n\t\t\t/^({{[^}]+}}\\s*)*\\[\\[([^\\]#|]+)[^\\]]*\\]\\]\\.*$/i\r\n\t\t],\r\n\t\t\r\n\t\tsearchDef: function(page) {\r\n\r\n\t\t\tvar def = \"\";\r\n\t\t\t\r\n\t\t\tvar cats = this.cat || \"(nom)|(verbe)|(adjectif([^|]*))|(adverbe)|(conjonction[^|]*)|\" +\r\n\t\t\t\"(article[^|]*)|(pronom[^|]*)|(interjection)|(préposition)|(onomatopée)|(variante typographique)\";\r\n\r\n\t\t\tvar match = new RegExp(\"{{S\\\\|(\" + cats +\r\n\t\t\t\t\")(\\\\|num=\\\\d+)*\\\\|fr(\\\\|num=\\\\d+)*(\\\\|flexion)*.+(\\\\n[^#].+)*\\\\n#\\\\s*(.+)(\\\\n##(.+)){0,1}\").exec(page);\r\n\r\n\t\t\tif(match) {\r\n\t\t\t\tvar nMatches = match.length;\r\n\t\t\t\tdef = match[nMatches - 3].trim();\r\n\t\t\t\tif (match[nMatches - 1] && def.replace(/{{[^}]*}}/g, \"\").trim() == \"\") def = match[nMatches - 1].trim();\r\n\t\t\t\tif (def) {\r\n\t\t\t\t\tthis.cat = match[1] == \"variante typographique\" ? \"\" : match[1];\r\n\t\t\t\t\tif (match[nMatches - 5]) {\r\n\t\t\t\t\t\tvar redirect = /\\[\\[([^#\\-|\\]]+)[^\\]]*\\]\\]['\\s\\.]*$/.exec(def);\r\n\t\t\t\t\t\tif (redirect) {\r\n\t\t\t\t\t\t\tif(/^(verbe)|(adjectif)$/.test(this.cat))\r\n\t\t\t\t\t\t\t\tthis.cat = \"(verbe(\\\\|num=\\\\d+)*)|(adjectif)\";\r\n\t\t\t\t\t\t\tthis.titles[0] = redirect[1];\r\n\t\t\t\t\t\t\t// console.log(this.word + \" : inflection ==> \" + redirect[1]);\r\n\t\t\t\t\t\t\t// this.word = redirect[1];\r\n\t\t\t\t\t\t\tthis.getPage();\r\n\t\t\t\t\t\t\tdef = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(this.cat == \"(verbe)|(adjectif)\") this.cat = match[1];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn def;\r\n\t\t}\r\n\t},\r\n\r\n\t{\r\n\r\n\t\tlng: \"de\",\r\n\r\n\t\tvariants: [],\r\n\r\n\t\tsearchDef: function(page) {\r\n\r\n\t\t\tvar def = \"\";\r\n\r\n\t\t\tvar cats = this.cat || \"(Konjugierte Form)|(Deklinierte Form)|(Substantiv)|(Verb)|(Partizip[^|]*)|\" +\r\n\t\t\t\"(Adjektiv)|(Konjunktion)|(Subjunktion)|(Artikel)|(Numerale)|(Onomatopoetikum)|(Interjektion)|(.+)\";\r\n\t\t\t\r\n\t\t\tvar match = new RegExp(\"{{Wortart\\\\|(\" + cats + \")\\\\|Deutsch}}[^]+\").exec(page);\r\n\r\n\t\t\tvar found = !!match;\r\n\t\t\tif(found) {\r\n\t\t\t\tif (match.length == 14 && match[13]) found = /(adverb)|(partikel)|(pronomen)$/.test(match[13]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvar newSpelling = /{{Alte Schreibweise\\|([^|]+)\\|/.exec(page);\r\n\t\t\t\tif(newSpelling) {\r\n\t\t\t\t\tthis.titles[0] = newSpelling[1];\r\n\t\t\t\t\tthis.getPage();\r\n\t\t\t\t\tdef = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(found) {\r\n\t\t\t\tswitch(match[1]) {\r\n\t\t\t\t\tcase \"Konjugierte Form\":\r\n\t\t\t\t\tcase \"Deklinierte Form\":\r\n\t\t\t\t\t\tvar redirect = /{{Grammatische Merkmale}}\\n+[^\\[]+\\[\\[([^\\]|]+)/.exec(match[0]);\r\n\t\t\t\t\t\tif (redirect) {\r\n\t\t\t\t\t\t\tthis.titles[0] = redirect[1].replace(/[^a-zäöüß]/gi, \"\");\r\n\t\t\t\t\t\t\tthis.getPage();\r\n\t\t\t\t\t\t\tdef = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tvar match2 = /\\n{{Bedeutungen}}\\n:\\[1\\](.*)/.exec(match[0]);\r\n\t\t\t\t\t\tif(match2) {\r\n\t\t\t\t\t\t\tdef = match2[1].trim();\r\n\t\t\t\t\t\t\tthis.cat = match[1];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn def;\r\n\r\n\t\t}\r\n\t}\r\n\r\n]\r\n\r\nvar parsers = {};\r\n\r\nlanguages.forEach(function(props) {\r\n\r\n\tvar p = parsers[props.lng] = function(word, options, callback) {\r\n\t\tthis.base = parser.parser;\r\n\t\tthis.base(word, props.lng, options, callback);\r\n\t}\r\n\r\n\tvar proto = p.prototype = new parser.parser;\r\n\tproto.variants = props.variants;\r\n\tproto.searchDef = props.searchDef;\r\n\r\n});\r\n\r\nmodule.exports.getDef = getDef;\r\n"]},"metadata":{},"sourceType":"script"}