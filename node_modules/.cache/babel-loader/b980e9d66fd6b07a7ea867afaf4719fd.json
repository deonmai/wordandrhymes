{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import'./App.css';import{useState}from'react';import{Route,HashRouter}from'react-router-dom';import Header from'./components/Header';import Button from'./components/Button';import Word from'./components/Word';import Rhymes from'./components/Rhymes';import Footer from'./components/Footer';import About from'./components/About';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var randomWords=require('random-words');// var rhyme = require('rhymes');\nvar rhyme=require('get-rhymes');var _useState=useState(\"CLICK\"),_useState2=_slicedToArray(_useState,2),currentWord=_useState2[0],setWord=_useState2[1];var _useState3=useState([\"FOR\",\"YOUR\",\"WORD\"]),_useState4=_slicedToArray(_useState3,2),rhymes=_useState4[0],setRhymes=_useState4[1];var generateWord=function generateWord(){var new_word=randomWords();new_word=new_word.toUpperCase();console.log(new_word);setWord(new_word);// getRhymes(new_word);\nbRhymes(new_word);};var randomInt=function randomInt(min,max){min=Math.ceil(min);max=Math.floor(max);return Math.floor(Math.random()*(max-min)+min);};var getRhymes=function getRhymes(word){var rhyme_list=rhyme(word);var new_rhymes=[];if(rhyme_list.length<1){setRhymes([\"No rhymes in database D:\"]);return;}else if(rhyme_list.length<3){rhyme_list.forEach(function(item){new_rhymes.unshift(item['word'].toUpperCase());});}else{for(var i=0;i<3;i++){var randInt=randomInt(1,rhyme_list.length);var lastWord=\"\";var rh=rhyme_list[randInt]['word'].toUpperCase();if(new_rhymes.includes(rh)||lastWord.charAt(0)===rh.charAt(0)||rh===word){i-=1;lastWord=\"\";}else{new_rhymes.unshift(rh);lastWord=rh;}}}setRhymes(new_rhymes);};var bRhymes=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(word){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// var rhyme_list = [];\nrhyme(word.toLowerCase()).then(function(rhyme_list){var new_rhymes=[];if(rhyme_list.length<1){setRhymes([\"No rhymes in database D:\"]);return;}else if(rhyme_list.length<3){rhyme_list.forEach(function(item){new_rhymes.unshift(item.toUpperCase());});}else{for(var i=0;i<3;i++){var randInt=randomInt(1,rhyme_list.length);var lastWord=\"\";var rh=rhyme_list[randInt].toUpperCase();if(new_rhymes.includes(rh)||lastWord.charAt(0)===rh.charAt(0)||rh===word){i-=1;lastWord=\"\";}else{new_rhymes.unshift(rh);lastWord=rh;}}}setRhymes(new_rhymes);});case 1:case\"end\":return _context.stop();}}},_callee);}));return function bRhymes(_x){return _ref.apply(this,arguments);};}();return/*#__PURE__*/_jsx(HashRouter,{basename:\"/\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(Header,{className:\"head\"}),/*#__PURE__*/_jsx(Route,{path:\"/\",exact:true,render:function render(props){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Button,{class:\"btn\",divName:\"btndiv\",text:\"Let's Go!\",onClick:generateWord}),/*#__PURE__*/_jsx(Word,{word:currentWord,class:\"wrd\"}),/*#__PURE__*/_jsx(Rhymes,{rhymes:rhymes,class:\"subwrds\"}),/*#__PURE__*/_jsx(Footer,{})]});}}),/*#__PURE__*/_jsx(Route,{path:\"/about\",exact:true,component:About})]})});}export default App;","map":{"version":3,"sources":["C:/Users/deonm/Documents/UNI/React/random-word-gen/src/App.js"],"names":["useState","Route","HashRouter","Header","Button","Word","Rhymes","Footer","About","App","randomWords","require","rhyme","currentWord","setWord","rhymes","setRhymes","generateWord","new_word","toUpperCase","console","log","bRhymes","randomInt","min","max","Math","ceil","floor","random","getRhymes","word","rhyme_list","new_rhymes","length","forEach","item","unshift","i","randInt","lastWord","rh","includes","charAt","toLowerCase","then","props"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useState } from 'react'\nimport { Route, HashRouter } from 'react-router-dom'\nimport Header from './components/Header'\nimport Button from './components/Button'\nimport Word from './components/Word'\nimport Rhymes from './components/Rhymes'\nimport Footer from './components/Footer'\nimport About from './components/About'\n\nfunction App() {\n  var randomWords = require('random-words');\n  // var rhyme = require('rhymes');\n  var rhyme = require('get-rhymes');\n\n  const [currentWord, setWord] = useState(\"CLICK\");\n  const [rhymes, setRhymes] = useState([\"FOR\", \"YOUR\", \"WORD\"])\n\n  const generateWord = () => {\n    var new_word =  randomWords();\n    new_word = new_word.toUpperCase();\n    console.log(new_word);\n\n    setWord(new_word);\n    // getRhymes(new_word);\n    bRhymes(new_word);\n  }\n\n  const randomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  const getRhymes = (word) => {\n    var rhyme_list = rhyme(word);\n    var new_rhymes = [];\n\n    if (rhyme_list.length < 1) {\n      setRhymes([\"No rhymes in database D:\"])\n      return;\n    }\n    else if (rhyme_list.length < 3) {\n      rhyme_list.forEach(item => {\n        new_rhymes.unshift(item['word'].toUpperCase())\n      })\n    }\n    else {\n      for(var i = 0; i < 3; i++) {\n        var randInt = randomInt(1, rhyme_list.length)\n        var lastWord = \"\";\n        var rh = rhyme_list[randInt]['word'].toUpperCase()\n\n        if (new_rhymes.includes(rh) || lastWord.charAt(0) === rh.charAt(0) || rh === word) {\n          i -= 1;\n          lastWord = \"\";\n        } else {\n          new_rhymes.unshift(rh)\n          lastWord = rh\n        }\n      }\n    }\n\n    setRhymes(new_rhymes);\n  }\n\n  const bRhymes = async word => {\n    // var rhyme_list = [];\n    rhyme(word.toLowerCase()).then(rhyme_list => {\n      var new_rhymes = [];\n\n      if (rhyme_list.length < 1) {\n        setRhymes([\"No rhymes in database D:\"])\n        return;\n      }\n      else if (rhyme_list.length < 3) {\n        rhyme_list.forEach(item => {\n          new_rhymes.unshift(item.toUpperCase())\n        })\n      }\n      else {\n        for(var i = 0; i < 3; i++) {\n          var randInt = randomInt(1, rhyme_list.length)\n          var lastWord = \"\";\n          var rh = rhyme_list[randInt].toUpperCase()\n\n          if (new_rhymes.includes(rh) || lastWord.charAt(0) === rh.charAt(0) || rh === word) {\n            i -= 1;\n            lastWord = \"\";\n          } else {\n            new_rhymes.unshift(rh)\n            lastWord = rh\n          }\n        }\n      }\n\n      setRhymes(new_rhymes);\n    })\n  }\n\n  return (\n    <HashRouter basename='/'>\n      <div className=\"App\">\n        <Header className = \"head\"/>\n        <Route path = '/' exact render = {(props) => (\n          <>\n            <Button class = \"btn\" divName = 'btndiv' text = \"Let's Go!\" onClick = {generateWord}/>\n\n            <Word word = {currentWord} class = \"wrd\"/>\n            <Rhymes rhymes = {rhymes} class = \"subwrds\"/>\n\n            <Footer />\n          </>\n        )} />\n\n        <Route path = '/about' exact component = {About} />\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}