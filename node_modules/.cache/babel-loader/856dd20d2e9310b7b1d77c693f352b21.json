{"ast":null,"code":"\"use strict\";\n\nvar Buffer = require(\"safer-buffer\").Buffer; // NOTE: Due to 'stream' module being pretty large (~100Kb, significant in browser environments), \n// we opt to dependency-inject it instead of creating a hard dependency.\n\n\nmodule.exports = function (stream_module) {\n  var Transform = stream_module.Transform; // == Encoder stream =======================================================\n\n  function IconvLiteEncoderStream(conv, options) {\n    this.conv = conv;\n    options = options || {};\n    options.decodeStrings = false; // We accept only strings, so we don't need to decode them.\n\n    Transform.call(this, options);\n  }\n\n  IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {\n    constructor: {\n      value: IconvLiteEncoderStream\n    }\n  });\n\n  IconvLiteEncoderStream.prototype._transform = function (chunk, encoding, done) {\n    if (typeof chunk != 'string') return done(new Error(\"Iconv encoding stream needs strings as its input.\"));\n\n    try {\n      var res = this.conv.write(chunk);\n      if (res && res.length) this.push(res);\n      done();\n    } catch (e) {\n      done(e);\n    }\n  };\n\n  IconvLiteEncoderStream.prototype._flush = function (done) {\n    try {\n      var res = this.conv.end();\n      if (res && res.length) this.push(res);\n      done();\n    } catch (e) {\n      done(e);\n    }\n  };\n\n  IconvLiteEncoderStream.prototype.collect = function (cb) {\n    var chunks = [];\n    this.on('error', cb);\n    this.on('data', function (chunk) {\n      chunks.push(chunk);\n    });\n    this.on('end', function () {\n      cb(null, Buffer.concat(chunks));\n    });\n    return this;\n  }; // == Decoder stream =======================================================\n\n\n  function IconvLiteDecoderStream(conv, options) {\n    this.conv = conv;\n    options = options || {};\n    options.encoding = this.encoding = 'utf8'; // We output strings.\n\n    Transform.call(this, options);\n  }\n\n  IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {\n    constructor: {\n      value: IconvLiteDecoderStream\n    }\n  });\n\n  IconvLiteDecoderStream.prototype._transform = function (chunk, encoding, done) {\n    if (!Buffer.isBuffer(chunk) && !(chunk instanceof Uint8Array)) return done(new Error(\"Iconv decoding stream needs buffers as its input.\"));\n\n    try {\n      var res = this.conv.write(chunk);\n      if (res && res.length) this.push(res, this.encoding);\n      done();\n    } catch (e) {\n      done(e);\n    }\n  };\n\n  IconvLiteDecoderStream.prototype._flush = function (done) {\n    try {\n      var res = this.conv.end();\n      if (res && res.length) this.push(res, this.encoding);\n      done();\n    } catch (e) {\n      done(e);\n    }\n  };\n\n  IconvLiteDecoderStream.prototype.collect = function (cb) {\n    var res = '';\n    this.on('error', cb);\n    this.on('data', function (chunk) {\n      res += chunk;\n    });\n    this.on('end', function () {\n      cb(null, res);\n    });\n    return this;\n  };\n\n  return {\n    IconvLiteEncoderStream: IconvLiteEncoderStream,\n    IconvLiteDecoderStream: IconvLiteDecoderStream\n  };\n};","map":{"version":3,"sources":["C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/encoding/node_modules/iconv-lite/lib/streams.js"],"names":["Buffer","require","module","exports","stream_module","Transform","IconvLiteEncoderStream","conv","options","decodeStrings","call","prototype","Object","create","constructor","value","_transform","chunk","encoding","done","Error","res","write","length","push","e","_flush","end","collect","cb","chunks","on","concat","IconvLiteDecoderStream","isBuffer","Uint8Array"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// NOTE: Due to 'stream' module being pretty large (~100Kb, significant in browser environments), \n// we opt to dependency-inject it instead of creating a hard dependency.\nmodule.exports = function(stream_module) {\n    var Transform = stream_module.Transform;\n\n    // == Encoder stream =======================================================\n\n    function IconvLiteEncoderStream(conv, options) {\n        this.conv = conv;\n        options = options || {};\n        options.decodeStrings = false; // We accept only strings, so we don't need to decode them.\n        Transform.call(this, options);\n    }\n\n    IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {\n        constructor: { value: IconvLiteEncoderStream }\n    });\n\n    IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {\n        if (typeof chunk != 'string')\n            return done(new Error(\"Iconv encoding stream needs strings as its input.\"));\n        try {\n            var res = this.conv.write(chunk);\n            if (res && res.length) this.push(res);\n            done();\n        }\n        catch (e) {\n            done(e);\n        }\n    }\n\n    IconvLiteEncoderStream.prototype._flush = function(done) {\n        try {\n            var res = this.conv.end();\n            if (res && res.length) this.push(res);\n            done();\n        }\n        catch (e) {\n            done(e);\n        }\n    }\n\n    IconvLiteEncoderStream.prototype.collect = function(cb) {\n        var chunks = [];\n        this.on('error', cb);\n        this.on('data', function(chunk) { chunks.push(chunk); });\n        this.on('end', function() {\n            cb(null, Buffer.concat(chunks));\n        });\n        return this;\n    }\n\n\n    // == Decoder stream =======================================================\n\n    function IconvLiteDecoderStream(conv, options) {\n        this.conv = conv;\n        options = options || {};\n        options.encoding = this.encoding = 'utf8'; // We output strings.\n        Transform.call(this, options);\n    }\n\n    IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {\n        constructor: { value: IconvLiteDecoderStream }\n    });\n\n    IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {\n        if (!Buffer.isBuffer(chunk) && !(chunk instanceof Uint8Array))\n            return done(new Error(\"Iconv decoding stream needs buffers as its input.\"));\n        try {\n            var res = this.conv.write(chunk);\n            if (res && res.length) this.push(res, this.encoding);\n            done();\n        }\n        catch (e) {\n            done(e);\n        }\n    }\n\n    IconvLiteDecoderStream.prototype._flush = function(done) {\n        try {\n            var res = this.conv.end();\n            if (res && res.length) this.push(res, this.encoding);                \n            done();\n        }\n        catch (e) {\n            done(e);\n        }\n    }\n\n    IconvLiteDecoderStream.prototype.collect = function(cb) {\n        var res = '';\n        this.on('error', cb);\n        this.on('data', function(chunk) { res += chunk; });\n        this.on('end', function() {\n            cb(null, res);\n        });\n        return this;\n    }\n\n    return {\n        IconvLiteEncoderStream: IconvLiteEncoderStream,\n        IconvLiteDecoderStream: IconvLiteDecoderStream,\n    };\n};\n"]},"metadata":{},"sourceType":"script"}