{"ast":null,"code":"const getDatamuseRhymes = require('./datamuse');\n\nconst getBRhymes = require('./b-rhymes');\n\nconst uniq = require('lodash.uniq');\n\nconst sortBy = require('lodash.sortby');\n\nconst isBlank = word => word.trim().length === 0;\n\nconst getRhymes = async word => {\n  if (word == null) throw new Error(`Word can't be null or undefined.`);\n  if (isBlank(word)) return []; // Get rhymes from both sources in parallel.\n\n  const promises = [getDatamuseRhymes(word), getBRhymes(word)];\n  const [dataMuseRhymes, bRhymes] = await Promise.all(promises);\n  const rhymes = uniq([...dataMuseRhymes, ...bRhymes]);\n  return sortBy(rhymes, ['length']);\n};\n\nmodule.exports = getRhymes;","map":{"version":3,"sources":["C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/get-rhymes/src/index.js"],"names":["getDatamuseRhymes","require","getBRhymes","uniq","sortBy","isBlank","word","trim","length","getRhymes","Error","promises","dataMuseRhymes","bRhymes","Promise","all","rhymes","module","exports"],"mappings":"AAAA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,YAAD,CAAjC;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,aAAD,CAApB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,eAAD,CAAtB;;AAEA,MAAMI,OAAO,GAAGC,IAAI,IAAIA,IAAI,CAACC,IAAL,GAAYC,MAAZ,KAAuB,CAA/C;;AAEA,MAAMC,SAAS,GAAG,MAAMH,IAAN,IAAc;AAC9B,MAAIA,IAAI,IAAI,IAAZ,EAAkB,MAAM,IAAII,KAAJ,CAAW,kCAAX,CAAN;AAClB,MAAIL,OAAO,CAACC,IAAD,CAAX,EAAmB,OAAO,EAAP,CAFW,CAI9B;;AACA,QAAMK,QAAQ,GAAG,CAACX,iBAAiB,CAACM,IAAD,CAAlB,EAA0BJ,UAAU,CAACI,IAAD,CAApC,CAAjB;AACA,QAAM,CAACM,cAAD,EAAiBC,OAAjB,IAA4B,MAAMC,OAAO,CAACC,GAAR,CAAYJ,QAAZ,CAAxC;AACA,QAAMK,MAAM,GAAGb,IAAI,CAAC,CAAC,GAAGS,cAAJ,EAAoB,GAAGC,OAAvB,CAAD,CAAnB;AACA,SAAOT,MAAM,CAACY,MAAD,EAAS,CAAC,QAAD,CAAT,CAAb;AACD,CATD;;AAWAC,MAAM,CAACC,OAAP,GAAiBT,SAAjB","sourcesContent":["const getDatamuseRhymes = require('./datamuse')\nconst getBRhymes = require('./b-rhymes')\nconst uniq = require('lodash.uniq')\nconst sortBy = require('lodash.sortby')\n\nconst isBlank = word => word.trim().length === 0\n\nconst getRhymes = async word => {\n  if (word == null) throw new Error(`Word can't be null or undefined.`)\n  if (isBlank(word)) return []\n\n  // Get rhymes from both sources in parallel.\n  const promises = [getDatamuseRhymes(word), getBRhymes(word)]\n  const [dataMuseRhymes, bRhymes] = await Promise.all(promises)\n  const rhymes = uniq([...dataMuseRhymes, ...bRhymes])\n  return sortBy(rhymes, ['length'])\n}\n\nmodule.exports = getRhymes\n"]},"metadata":{},"sourceType":"script"}