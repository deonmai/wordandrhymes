{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar getDatamuseRhymes = require('./datamuse');\n\nvar getBRhymes = require('./b-rhymes');\n\nvar uniq = require('lodash.uniq');\n\nvar sortBy = require('lodash.sortby');\n\nvar isBlank = function isBlank(word) {\n  return word.trim().length === 0;\n};\n\nvar getRhymes = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(word) {\n    var promises, _yield$Promise$all, _yield$Promise$all2, dataMuseRhymes, bRhymes, rhymes;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(word == null)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error(\"Word can't be null or undefined.\");\n\n          case 2:\n            if (!isBlank(word)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", []);\n\n          case 4:\n            // Get rhymes from both sources in parallel.\n            promises = [getDatamuseRhymes(word), getBRhymes(word)];\n            _context.next = 7;\n            return Promise.all(promises);\n\n          case 7:\n            _yield$Promise$all = _context.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            dataMuseRhymes = _yield$Promise$all2[0];\n            bRhymes = _yield$Promise$all2[1];\n            rhymes = uniq([].concat(_toConsumableArray(dataMuseRhymes), _toConsumableArray(bRhymes)));\n            return _context.abrupt(\"return\", sortBy(rhymes, ['length']));\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getRhymes(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = getRhymes;","map":{"version":3,"sources":["C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/get-rhymes/src/index.js"],"names":["getDatamuseRhymes","require","getBRhymes","uniq","sortBy","isBlank","word","trim","length","getRhymes","Error","promises","Promise","all","dataMuseRhymes","bRhymes","rhymes","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,YAAD,CAAjC;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,aAAD,CAApB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,eAAD,CAAtB;;AAEA,IAAMI,OAAO,GAAG,SAAVA,OAAU,CAAAC,IAAI;AAAA,SAAIA,IAAI,CAACC,IAAL,GAAYC,MAAZ,KAAuB,CAA3B;AAAA,CAApB;;AAEA,IAAMC,SAAS;AAAA,sEAAG,iBAAMH,IAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBACZA,IAAI,IAAI,IADI;AAAA;AAAA;AAAA;;AAAA,kBACQ,IAAII,KAAJ,oCADR;;AAAA;AAAA,iBAEZL,OAAO,CAACC,IAAD,CAFK;AAAA;AAAA;AAAA;;AAAA,6CAEU,EAFV;;AAAA;AAIhB;AACMK,YAAAA,QALU,GAKC,CAACX,iBAAiB,CAACM,IAAD,CAAlB,EAA0BJ,UAAU,CAACI,IAAD,CAApC,CALD;AAAA;AAAA,mBAMwBM,OAAO,CAACC,GAAR,CAAYF,QAAZ,CANxB;;AAAA;AAAA;AAAA;AAMTG,YAAAA,cANS;AAMOC,YAAAA,OANP;AAOVC,YAAAA,MAPU,GAODb,IAAI,8BAAKW,cAAL,sBAAwBC,OAAxB,GAPH;AAAA,6CAQTX,MAAM,CAACY,MAAD,EAAS,CAAC,QAAD,CAAT,CARG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATP,SAAS;AAAA;AAAA;AAAA,GAAf;;AAWAQ,MAAM,CAACC,OAAP,GAAiBT,SAAjB","sourcesContent":["const getDatamuseRhymes = require('./datamuse')\nconst getBRhymes = require('./b-rhymes')\nconst uniq = require('lodash.uniq')\nconst sortBy = require('lodash.sortby')\n\nconst isBlank = word => word.trim().length === 0\n\nconst getRhymes = async word => {\n  if (word == null) throw new Error(`Word can't be null or undefined.`)\n  if (isBlank(word)) return []\n\n  // Get rhymes from both sources in parallel.\n  const promises = [getDatamuseRhymes(word), getBRhymes(word)]\n  const [dataMuseRhymes, bRhymes] = await Promise.all(promises)\n  const rhymes = uniq([...dataMuseRhymes, ...bRhymes])\n  return sortBy(rhymes, ['length'])\n}\n\nmodule.exports = getRhymes\n"]},"metadata":{},"sourceType":"script"}