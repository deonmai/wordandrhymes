{"ast":null,"code":"'use strict';\n\nvar iconvLite = require('iconv-lite'); // Expose to the world\n\n\nmodule.exports.convert = convert;\n/**\n * Convert encoding of an UTF-8 string or a buffer\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\n\nfunction convert(str, to, from) {\n  from = checkEncoding(from || 'UTF-8');\n  to = checkEncoding(to || 'UTF-8');\n  str = str || '';\n  var result;\n\n  if (from !== 'UTF-8' && typeof str === 'string') {\n    str = Buffer.from(str, 'binary');\n  }\n\n  if (from === to) {\n    if (typeof str === 'string') {\n      result = Buffer.from(str);\n    } else {\n      result = str;\n    }\n  } else {\n    try {\n      result = convertIconvLite(str, to, from);\n    } catch (E) {\n      console.error(E);\n      result = str;\n    }\n  }\n\n  if (typeof result === 'string') {\n    result = Buffer.from(result, 'utf-8');\n  }\n\n  return result;\n}\n/**\n * Convert encoding of astring with iconv-lite\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\n\n\nfunction convertIconvLite(str, to, from) {\n  if (to === 'UTF-8') {\n    return iconvLite.decode(str, from);\n  } else if (from === 'UTF-8') {\n    return iconvLite.encode(str, to);\n  } else {\n    return iconvLite.encode(iconvLite.decode(str, from), to);\n  }\n}\n/**\n * Converts charset name if needed\n *\n * @param {String} name Character set\n * @return {String} Character set name\n */\n\n\nfunction checkEncoding(name) {\n  return (name || '').toString().trim().replace(/^latin[\\-_]?(\\d+)$/i, 'ISO-8859-$1').replace(/^win(?:dows)?[\\-_]?(\\d+)$/i, 'WINDOWS-$1').replace(/^utf[\\-_]?(\\d+)$/i, 'UTF-$1').replace(/^ks_c_5601\\-1987$/i, 'CP949').replace(/^us[\\-_]?ascii$/i, 'ASCII').toUpperCase();\n}","map":{"version":3,"sources":["C:/Users/deonm/Documents/UNI/React/random-word-gen/node_modules/encoding/lib/encoding.js"],"names":["iconvLite","require","module","exports","convert","str","to","from","checkEncoding","result","Buffer","convertIconvLite","E","console","error","decode","encode","name","toString","trim","replace","toUpperCase"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAvB,C,CAEA;;;AACAC,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBA,OAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,OAAT,CAAiBC,GAAjB,EAAsBC,EAAtB,EAA0BC,IAA1B,EAAgC;AAC5BA,EAAAA,IAAI,GAAGC,aAAa,CAACD,IAAI,IAAI,OAAT,CAApB;AACAD,EAAAA,EAAE,GAAGE,aAAa,CAACF,EAAE,IAAI,OAAP,CAAlB;AACAD,EAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;AAEA,MAAII,MAAJ;;AAEA,MAAIF,IAAI,KAAK,OAAT,IAAoB,OAAOF,GAAP,KAAe,QAAvC,EAAiD;AAC7CA,IAAAA,GAAG,GAAGK,MAAM,CAACH,IAAP,CAAYF,GAAZ,EAAiB,QAAjB,CAAN;AACH;;AAED,MAAIE,IAAI,KAAKD,EAAb,EAAiB;AACb,QAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AACzBI,MAAAA,MAAM,GAAGC,MAAM,CAACH,IAAP,CAAYF,GAAZ,CAAT;AACH,KAFD,MAEO;AACHI,MAAAA,MAAM,GAAGJ,GAAT;AACH;AACJ,GAND,MAMO;AACH,QAAI;AACAI,MAAAA,MAAM,GAAGE,gBAAgB,CAACN,GAAD,EAAMC,EAAN,EAAUC,IAAV,CAAzB;AACH,KAFD,CAEE,OAAOK,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACAH,MAAAA,MAAM,GAAGJ,GAAT;AACH;AACJ;;AAED,MAAI,OAAOI,MAAP,KAAkB,QAAtB,EAAgC;AAC5BA,IAAAA,MAAM,GAAGC,MAAM,CAACH,IAAP,CAAYE,MAAZ,EAAoB,OAApB,CAAT;AACH;;AAED,SAAOA,MAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,gBAAT,CAA0BN,GAA1B,EAA+BC,EAA/B,EAAmCC,IAAnC,EAAyC;AACrC,MAAID,EAAE,KAAK,OAAX,EAAoB;AAChB,WAAON,SAAS,CAACe,MAAV,CAAiBV,GAAjB,EAAsBE,IAAtB,CAAP;AACH,GAFD,MAEO,IAAIA,IAAI,KAAK,OAAb,EAAsB;AACzB,WAAOP,SAAS,CAACgB,MAAV,CAAiBX,GAAjB,EAAsBC,EAAtB,CAAP;AACH,GAFM,MAEA;AACH,WAAON,SAAS,CAACgB,MAAV,CAAiBhB,SAAS,CAACe,MAAV,CAAiBV,GAAjB,EAAsBE,IAAtB,CAAjB,EAA8CD,EAA9C,CAAP;AACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,aAAT,CAAuBS,IAAvB,EAA6B;AACzB,SAAO,CAACA,IAAI,IAAI,EAAT,EACFC,QADE,GAEFC,IAFE,GAGFC,OAHE,CAGM,qBAHN,EAG6B,aAH7B,EAIFA,OAJE,CAIM,4BAJN,EAIoC,YAJpC,EAKFA,OALE,CAKM,mBALN,EAK2B,QAL3B,EAMFA,OANE,CAMM,oBANN,EAM4B,OAN5B,EAOFA,OAPE,CAOM,kBAPN,EAO0B,OAP1B,EAQFC,WARE,EAAP;AASH","sourcesContent":["'use strict';\n\nvar iconvLite = require('iconv-lite');\n\n// Expose to the world\nmodule.exports.convert = convert;\n\n/**\n * Convert encoding of an UTF-8 string or a buffer\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\nfunction convert(str, to, from) {\n    from = checkEncoding(from || 'UTF-8');\n    to = checkEncoding(to || 'UTF-8');\n    str = str || '';\n\n    var result;\n\n    if (from !== 'UTF-8' && typeof str === 'string') {\n        str = Buffer.from(str, 'binary');\n    }\n\n    if (from === to) {\n        if (typeof str === 'string') {\n            result = Buffer.from(str);\n        } else {\n            result = str;\n        }\n    } else {\n        try {\n            result = convertIconvLite(str, to, from);\n        } catch (E) {\n            console.error(E);\n            result = str;\n        }\n    }\n\n    if (typeof result === 'string') {\n        result = Buffer.from(result, 'utf-8');\n    }\n\n    return result;\n}\n\n/**\n * Convert encoding of astring with iconv-lite\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\nfunction convertIconvLite(str, to, from) {\n    if (to === 'UTF-8') {\n        return iconvLite.decode(str, from);\n    } else if (from === 'UTF-8') {\n        return iconvLite.encode(str, to);\n    } else {\n        return iconvLite.encode(iconvLite.decode(str, from), to);\n    }\n}\n\n/**\n * Converts charset name if needed\n *\n * @param {String} name Character set\n * @return {String} Character set name\n */\nfunction checkEncoding(name) {\n    return (name || '')\n        .toString()\n        .trim()\n        .replace(/^latin[\\-_]?(\\d+)$/i, 'ISO-8859-$1')\n        .replace(/^win(?:dows)?[\\-_]?(\\d+)$/i, 'WINDOWS-$1')\n        .replace(/^utf[\\-_]?(\\d+)$/i, 'UTF-$1')\n        .replace(/^ks_c_5601\\-1987$/i, 'CP949')\n        .replace(/^us[\\-_]?ascii$/i, 'ASCII')\n        .toUpperCase();\n}\n"]},"metadata":{},"sourceType":"script"}